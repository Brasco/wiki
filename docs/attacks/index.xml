<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Attacks on XS-Leaks Wiki</title><link>https://xsleaks.com/docs/attacks/</link><description>Recent content in Attacks on XS-Leaks Wiki</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://xsleaks.com/docs/attacks/index.xml" rel="self" type="application/rss+xml"/><item><title>CORB Leaks</title><link>https://xsleaks.com/docs/attacks/corb/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/attacks/corb/</guid><description>Cross-Origin Read Blocking (CORB) is a web platform security feature aimed at reducing the impact of speculative side-channel attacks such as Spectre. Unfortunately blocking certain types of requests introduced a new type of XS-Leaks, allowing attackers to detect if CORB was enforced in one request, but wasn&amp;rsquo;t on another. Nevertheless, the introduced XS-Leaks are much less problematic than the issues actively protected by CORB (e.g Spectre).
CORB &amp;amp; Error Events # Attackers can observe when CORB is enforced if a response returns a CORB protected Content-Type (and nosniff) with status code 2xx which results in CORB stripping the body and headers from the response.</description></item><item><title>CORP Leaks</title><link>https://xsleaks.com/docs/attacks/corp/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/attacks/corp/</guid><description>Explanation # Cross-Origin Resource Policy (CORP) is a web platform security feature which enforces CORB. Unfortunately, similarly to CORB XS-Leak applications can introduce a new XS-Leak if they misconfigure the use of this protection.
A webpage will introduce an XS-Leak if CORP is enforced based on user data. If a page search feature enforces CORP when showing results, but doesn&amp;rsquo;t when returning no results, an attacker will be able to distinguish the two scenarios.</description></item><item><title>Error Events</title><link>https://xsleaks.com/docs/attacks/error-events/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/attacks/error-events/</guid><description>When a webpage issues a request to a server (e.g fetch, HTML tags), this request will be received and processed by that server. When received the server will decide whether the request should succeed (e.g 200) or fail (e.g 404) based on the provided context. When a response has an error status an error event will be fired by the browser for the page to handle. These errors are also extended to situations where the parser fails, for example, trying to embed HTML content as an image.</description></item><item><title>Frame Counting</title><link>https://xsleaks.com/docs/attacks/frame-counting/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/attacks/frame-counting/</guid><description>Explanation # window references allow cross-origin pages to get access to some attributes of other pages. These references become available when using or allowing iframe and window.open. They provide some information (although limited) about the window as they still respect the Same Origin Policy.
One of the accessible attributes is window.length which provides the number of frames in the window. This attribute can give valuable information about a page to an attacker.</description></item><item><title>ID Attribute</title><link>https://xsleaks.com/docs/attacks/id-attribute/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/attacks/id-attribute/</guid><description>Explanation # The id attribute is widely used to identify some HTML elements. Unfortunately, these ids can be leaked by leveraging the focus event and the URL fragment. There are two alternatives to complete this attack:
By using an iframe an attacker can load the target website once and brute-force the URL hash until the focus event fires. The onblur event can be used to detect when the target has focus 1.</description></item><item><title>Navigations</title><link>https://xsleaks.com/docs/attacks/navigations/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/attacks/navigations/</guid><description>Detecting if a cross-site page triggered a navigation (or didn&amp;rsquo;t) can be useful to an attacker. For example, a website may trigger a navigation in a certain endpoint depending on the status of the user.
To detect if any kind of navigation occurred, an attacker can:
Use an iframe and count the number of times the onload event is triggered. Check the value of History.length, accessible through any window reference.</description></item><item><title>postMessage Broadcasts</title><link>https://xsleaks.com/docs/attacks/postmessage-broadcasts/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/attacks/postmessage-broadcasts/</guid><description>Applications often use postMessage broadcasts to provide information to any interested origin. Apart from the obvious security issues (providing sensitive information to any origin) other problems might occur if a legitimate postMessage broadcast is not properly deployed 1.
If a broadcast happens based on user information, attackers might be able to leak that information if they can distinguish requests. There are multiple ways applications can be inconsistent with broadcasts based on user information:</description></item><item><title>XS-Search</title><link>https://xsleaks.com/docs/attacks/xs-search/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/attacks/xs-search/</guid><description>Cross-Site Search (XS-Search) is an important attack and principle in the family of XS-Leaks. The attack abuses Query-Based Search Systems to leak user information from an attacker origin. The original attack used timing measurements to detect when a search system returned results or no results and works as follows:
Establish a baseline time for a request returning results (hit), and a baseline for a request with no results (miss). Start a timing attack on the request to the search endpoint, brute-forcing the first character (?</description></item><item><title>Cache Probing</title><link>https://xsleaks.com/docs/attacks/cache-probing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/attacks/cache-probing/</guid><description>The principle of Cache Probing consists of detecting whether some resource was cached by the browser. The concept is known since the begging of the web 1 and initially used timing differences to succeed.
When a user visits a website some resources such as images, scripts and HTML content are fetched and later cached by the browser (under certain conditions). This optimization will make future navigations faster as the browser will serve those resources from disk instead of requesting them again.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Application Design on XS-Leaks Wiki</title><link>https://xsleaks.com/docs/defenses/design-protections/</link><description>Recent content in Application Design on XS-Leaks Wiki</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://xsleaks.com/docs/defenses/design-protections/index.xml" rel="self" type="application/rss+xml"/><item><title>Subresource Protections</title><link>https://xsleaks.com/docs/defenses/design-protections/subresource-protections/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/defenses/design-protections/subresource-protections/</guid><description>The fundamental idea of designing protections for subresources is that subresources cannot be targeted by XS-Leaks if the attacker cannot cause them to return any user data.
Secure tokens # One way of achieving this is similar to how endpoints can be protected from CSRF attacks. While CSRF protections tend to focus on state changing requests, XS-Leak protections are meant to defend GET requests.
To apply this protection, each request for a subresource needs to include some unique value that attackers cannot obtain.</description></item></channel></rss>
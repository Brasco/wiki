<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Opt-In Mechanisms on XS-Leaks Wiki</title><link>https://xsleaks.com/docs/defenses/opt-in/</link><description>Recent content in Opt-In Mechanisms on XS-Leaks Wiki</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://xsleaks.com/docs/defenses/opt-in/index.xml" rel="self" type="application/rss+xml"/><item><title>Cross-Origin-Opener-Policy</title><link>https://xsleaks.com/docs/defenses/opt-in/coop/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/defenses/opt-in/coop/</guid><description>Getting access to a website&amp;rsquo;s window object is a common prerequisite for different XS-Leak techniques. Framing Protections can ensure that an attacker cannot use iframes to access the window object, but this does not stop an attacker from accessing it from an opened window through window.open(url) or window.opener references.
Exploiting XS-Leaks with window.open is generally seen as the least appealing option for an attacker because the user can see it happen in the open browser window.</description></item><item><title>Cross-Origin-Resource-Policy</title><link>https://xsleaks.com/docs/defenses/opt-in/corp/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/defenses/opt-in/corp/</guid><description>Cross-Origin Resource Policy (CORP) is a web platform security feature that allows websites to prevent certain resources from being loaded by other origins. This protection complements CORB since it is an opt-in defense whereas CORB blocks some cross-origin reads by default. It is designed to protect against both speculative execution attacks and XS-Leaks by allowing developers to ensure that sensitive resources cannot end up in attacker controlled processes. Unlike CORB, this protection is enforced in the browser only if an application opts in to the protection.</description></item><item><title>Fetch Metadata</title><link>https://xsleaks.com/docs/defenses/opt-in/fetch-metadata/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/defenses/opt-in/fetch-metadata/</guid><description>Fetch metadata headers are sent by browsers with every HTTP request. These headers provide context on how a request was initiated so that applications are able to make more informed decisions on how to respond to them. This allows servers to behave differently when they detect potential attacks (e.g. unexpected cross-origin requests)1. This can be very effective against cross-origin attacks like XSSI, XS-Leaks, Clickjacking, and CSRF if a strict policy is deployed on the server.</description></item><item><title>Framing Protections</title><link>https://xsleaks.com/docs/defenses/opt-in/xfo/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/defenses/opt-in/xfo/</guid><description>A considerable number of XS-Leaks relies on some properties of iframes. If an attacker is unable to embed the contents of a page as an iframe, frame, embed or object then the attack may no longer be possible. To mitigate XS-Leaks which rely on these objects, pages can forbid or select which origins can embed them. This is possible by using the X-Frame-Options Header or the CSP frame-ancestors directive.
Since a website enforcing Framing Protections can&amp;rsquo;t be embedded from an attacker origin, the website is not rendered and the JavaScript does not run.</description></item><item><title>Same-Site Cookies</title><link>https://xsleaks.com/docs/defenses/opt-in/same-site-cookies/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/defenses/opt-in/same-site-cookies/</guid><description>Same-Site cookies are one of the most impactful modern security mechanisms for fixing security issues that involve cross-site requests. This mechanism allows applications to make browsers only include cookies in requests that are issued same-site 1. This type of cookies has three modes: None, Lax, and Strict.
Same-Site Cookie Modes # None disables all protections and restores the old behavior of cookies. This mode is not recommended.
The None attribute must come with the Secure flag [^same-site-none].</description></item></channel></rss>
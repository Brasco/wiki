<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>defenses on XS-Leaks Wiki</title><link>https://xsleaks.com/category/defenses/</link><description>Recent content in defenses on XS-Leaks Wiki</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://xsleaks.com/category/defenses/index.xml" rel="self" type="application/rss+xml"/><item><title>Cross-Origin Read Blocking</title><link>https://xsleaks.com/docs/defenses/browser-intrinsic/corb/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/defenses/browser-intrinsic/corb/</guid><description>Explanation # Cross-Origin Read Blocking (CORB) is a browser defense mechanism that prevents attackers from loading certain cross-origin resources in unlikely scenarios 1. This protection was created to prevent speculative side-channel attacks such as Spectre which allow attackers to read the memory of their own process. CORB aims to prevent attackers from loading cross-origin contents which might contain sensitive information into an attacker-controlled process. For instance, if an attacker tries to load an HTML, XML, or JSON as an img or script tag, CORB will prevent this from happening.</description></item><item><title>Cross-Origin-Opener-Policy</title><link>https://xsleaks.com/docs/defenses/opt-in/coop/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/defenses/opt-in/coop/</guid><description>Explanation # A good portion of XS-Leaks has multiple alternatives to execute the same attack, some in common with each other. For instance, some XS-Leaks abuse properties of iframes to succeed which can be fully mitigated by deploying Framing Protections. However, this same group of XS-Leaks can usually be abused by other common alternatives, that need other protections. One of those alternatives consists of navigating the user away using window.</description></item><item><title>Cross-Origin-Resource-Policy</title><link>https://xsleaks.com/docs/defenses/opt-in/corp/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/defenses/opt-in/corp/</guid><description>Cross-Origin-Resource-Policy (CORP) response header enforces Cross-Origin Read Blocking (CORB) as it provides more protection by covering more resources 1. Both protect against speculative side-channel attacks (Spectre) by preventing attackers from loading certain cross-origin resources in elements like script, img, video, etc. Unlike CORB, this protection is enforced in the browser only if an application opts into the protection. Applications can define which groups of origins (same-site, same-origin, cross-site) are allowed to read their resources.</description></item><item><title>Defensive Design</title><link>https://xsleaks.com/docs/defenses/design-protections/defensive-design/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/defenses/design-protections/defensive-design/</guid><description>This section should focus on defensive design techniques to prevent XS-Leaks from happening. Some ideas:
The way applications use iframes to display information based on a user query (search system) How applications use Fetch Metadata with Vary headers to prevent cache probing attacks and what problems might occur with improper deployments. Are there any drawbacks of deploying this? How to ensure all application endpoints implement certain Headers to have the same behavior across different states.</description></item><item><title>Fetch Metadata</title><link>https://xsleaks.com/docs/defenses/opt-in/fetch-metadata/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/defenses/opt-in/fetch-metadata/</guid><description>Fetch Metadata Headers are sent by browsers in every request or navigation made by a page. These Headers provide context on how every request/navigation was initiated so that applications are able to make more informed decisions on how to respond to them. This allows servers to behave differently when they detect potential attacks (i.e. unexpected cross-origin requests)1. This mechanism can be very effective against cross-origin attacks like XSSI, XS-Leaks, Clickjacking, and CSRF.</description></item><item><title>Framing Protections</title><link>https://xsleaks.com/docs/defenses/opt-in/xfo/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/defenses/opt-in/xfo/</guid><description>Explanation # A considerable number of XS-Leaks relies on some properties of iframes. If an attacker is unable to embed the contents of a page as an iframe then the attack may no longer be possible. To mitigate XS-Leaks which rely on this object, pages can forbid or select which origins can embed them. This is possible by using the X-Frame-Options Header or the CSP frame-ancestors directive.
Since a website enforcing Framing Protections can&amp;rsquo;t be embedded from an attacker origin, the website is not rendered and the JavaScript does not run.</description></item><item><title>Partitioned HTTP Cache</title><link>https://xsleaks.com/docs/defenses/browser-intrinsic/partitioned-cache/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/defenses/browser-intrinsic/partitioned-cache/</guid><description>Explanation # Cache probing attacks have been present on the web for a long time mainly because browsers HTTP cache is shared across all the websites visited by a user, allowing attackers to interact with it and infer private information from other origins.
Considering Opt-in solutions, applications can use the Vary Header combined with Fetch-Metadata to prevent cross-origin fetches to be affected by the site cache or use some workarounds to protect resources, which come with downsides.</description></item><item><title>Same-Site Cookies</title><link>https://xsleaks.com/docs/defenses/opt-in/same-site-cookies/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/defenses/opt-in/same-site-cookies/</guid><description>Explanation # Same-Site Cookies are one of the most impactful Security Mechanisms towards fixing security issues that involve cross-site requests. This mechanism allows applications to add a special restriction to cookies, forcing browsers to only append them in requests that are issued same-site 1. This type of cookies has two modes: Lax and Strict.
Lax V.s Strict # The only difference between Lax and Strict is that Lax mode allows cookies to be added to requests triggered by top-level navigations.</description></item><item><title>Subresource Protections</title><link>https://xsleaks.com/docs/defenses/design-protections/subresource-protections/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.com/docs/defenses/design-protections/subresource-protections/</guid><description>Random tokens # One of the principles of protecting subresources is the same as protecting endpoints from CSRF attacks. The difference from CSRF protections is that in the case of XS-Leaks, GET requests are the ones usually worth protecting. To apply this protection applications can append a (cryptographically strong) pseudorandom value, unique to each request/session, to make the URL of a subresource unpredictable to an attacker. The protection can be applied to the following types of subresources:</description></item></channel></rss>